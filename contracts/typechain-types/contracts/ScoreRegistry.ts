/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ScoreRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_SCORE"
      | "adminClearScore"
      | "latestScoreOf"
      | "myLatestScore"
      | "owner"
      | "paused"
      | "renounceOwnership"
      | "setPaused"
      | "submitScore"
      | "totalSubmissions"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminCleared"
      | "OwnershipTransferred"
      | "PauseStateChanged"
      | "ScoreSubmitted"
  ): EventFragment;

  encodeFunctionData(functionFragment: "MAX_SCORE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "adminClearScore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "latestScoreOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "myLatestScore",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setPaused", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "submitScore",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSubmissions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_SCORE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminClearScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestScoreOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "myLatestScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSubmissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace AdminClearedEvent {
  export type InputTuple = [admin: AddressLike, user: AddressLike];
  export type OutputTuple = [admin: string, user: string];
  export interface OutputObject {
    admin: string;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PauseStateChangedEvent {
  export type InputTuple = [isPaused: boolean];
  export type OutputTuple = [isPaused: boolean];
  export interface OutputObject {
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScoreSubmittedEvent {
  export type InputTuple = [
    user: AddressLike,
    value: BigNumberish,
    timestamp: BigNumberish,
    metadataHash: BytesLike
  ];
  export type OutputTuple = [
    user: string,
    value: bigint,
    timestamp: bigint,
    metadataHash: string
  ];
  export interface OutputObject {
    user: string;
    value: bigint;
    timestamp: bigint;
    metadataHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ScoreRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ScoreRegistry;
  waitForDeployment(): Promise<this>;

  interface: ScoreRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_SCORE: TypedContractMethod<[], [bigint], "view">;

  adminClearScore: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  latestScoreOf: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, string] & {
        value: bigint;
        timestamp: bigint;
        metadataHash: string;
      }
    ],
    "view"
  >;

  myLatestScore: TypedContractMethod<
    [],
    [
      [bigint, bigint, string] & {
        value: bigint;
        timestamp: bigint;
        metadataHash: string;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setPaused: TypedContractMethod<[_paused: boolean], [void], "nonpayable">;

  submitScore: TypedContractMethod<
    [value: BigNumberish, metadataHash: BytesLike],
    [void],
    "nonpayable"
  >;

  totalSubmissions: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_SCORE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "adminClearScore"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "latestScoreOf"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, string] & {
        value: bigint;
        timestamp: bigint;
        metadataHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "myLatestScore"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, string] & {
        value: bigint;
        timestamp: bigint;
        metadataHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPaused"
  ): TypedContractMethod<[_paused: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitScore"
  ): TypedContractMethod<
    [value: BigNumberish, metadataHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalSubmissions"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AdminCleared"
  ): TypedContractEvent<
    AdminClearedEvent.InputTuple,
    AdminClearedEvent.OutputTuple,
    AdminClearedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PauseStateChanged"
  ): TypedContractEvent<
    PauseStateChangedEvent.InputTuple,
    PauseStateChangedEvent.OutputTuple,
    PauseStateChangedEvent.OutputObject
  >;
  getEvent(
    key: "ScoreSubmitted"
  ): TypedContractEvent<
    ScoreSubmittedEvent.InputTuple,
    ScoreSubmittedEvent.OutputTuple,
    ScoreSubmittedEvent.OutputObject
  >;

  filters: {
    "AdminCleared(address,address)": TypedContractEvent<
      AdminClearedEvent.InputTuple,
      AdminClearedEvent.OutputTuple,
      AdminClearedEvent.OutputObject
    >;
    AdminCleared: TypedContractEvent<
      AdminClearedEvent.InputTuple,
      AdminClearedEvent.OutputTuple,
      AdminClearedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PauseStateChanged(bool)": TypedContractEvent<
      PauseStateChangedEvent.InputTuple,
      PauseStateChangedEvent.OutputTuple,
      PauseStateChangedEvent.OutputObject
    >;
    PauseStateChanged: TypedContractEvent<
      PauseStateChangedEvent.InputTuple,
      PauseStateChangedEvent.OutputTuple,
      PauseStateChangedEvent.OutputObject
    >;

    "ScoreSubmitted(address,uint256,uint256,bytes32)": TypedContractEvent<
      ScoreSubmittedEvent.InputTuple,
      ScoreSubmittedEvent.OutputTuple,
      ScoreSubmittedEvent.OutputObject
    >;
    ScoreSubmitted: TypedContractEvent<
      ScoreSubmittedEvent.InputTuple,
      ScoreSubmittedEvent.OutputTuple,
      ScoreSubmittedEvent.OutputObject
    >;
  };
}
